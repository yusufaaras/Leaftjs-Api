// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoskBilisimAPI.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MoskBilisimAPI.Migrations
{
    [DbContext(typeof(MoskBilisimDbContext))]
    [Migration("20240921125208_mig_test")]
    partial class mig_test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MapData");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng")
                        .HasColumnType("double precision");

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("PolygonId")
                        .HasColumnType("integer");

                    b.Property<int?>("PolylineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.HasIndex("PolylineId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.ImportantPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng")
                        .HasColumnType("double precision");

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.ToTable("ImportantPoints");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng")
                        .HasColumnType("double precision");

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Polyline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.ToTable("Polylines");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Rectangle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<int>("NortheastId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SouthwestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.HasIndex("NortheastId");

                    b.HasIndex("SouthwestId");

                    b.ToTable("Rectangles");
                });

            modelBuilder.Entity("Polygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MapDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapDataId");

                    b.ToTable("Polygons");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Circle", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("Circles")
                        .HasForeignKey("MapDataId");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Coordinate", b =>
                {
                    b.HasOne("Polygon", null)
                        .WithMany("Points")
                        .HasForeignKey("PolygonId");

                    b.HasOne("MoskBilisimAPI.Core.Polyline", null)
                        .WithMany("Points")
                        .HasForeignKey("PolylineId");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.ImportantPoint", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("ImportantPoints")
                        .HasForeignKey("MapDataId");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Marker", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("Markers")
                        .HasForeignKey("MapDataId");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Polyline", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("Polylines")
                        .HasForeignKey("MapDataId");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Rectangle", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("Rectangles")
                        .HasForeignKey("MapDataId");

                    b.HasOne("MoskBilisimAPI.Core.Coordinate", "Northeast")
                        .WithMany()
                        .HasForeignKey("NortheastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoskBilisimAPI.Core.Coordinate", "Southwest")
                        .WithMany()
                        .HasForeignKey("SouthwestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Northeast");

                    b.Navigation("Southwest");
                });

            modelBuilder.Entity("Polygon", b =>
                {
                    b.HasOne("MapData", null)
                        .WithMany("Polygons")
                        .HasForeignKey("MapDataId");
                });

            modelBuilder.Entity("MapData", b =>
                {
                    b.Navigation("Circles");

                    b.Navigation("ImportantPoints");

                    b.Navigation("Markers");

                    b.Navigation("Polygons");

                    b.Navigation("Polylines");

                    b.Navigation("Rectangles");
                });

            modelBuilder.Entity("MoskBilisimAPI.Core.Polyline", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Polygon", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
